generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String @id @default(uuid())
  password   String
  email      String @unique
  firstName  String
  lastName   String
  country    String
  city       String
  address    String
  street     String
  postalCode String
}

model Product {
  id             String          @id @default(uuid())
  category       Categories      @relation(fields: [categoryId], references: [id])
  categoryId     String
  images         ProductImages[]
  title          String
  rating         Int
  price          Int
  dimensions     String
  colors         Colors[]
  description    String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @default(now())
  discount       Int
  expireDiscount DateTime
  newArrival     Boolean
  brand          String
  productColors  ProductColors[]
}

model Categories {
  id                 String               @id @default(uuid())
  name               String
  categoryProperties CategoryProperties[]
  parentCategory     Categories?          @relation("CategoriesHierarchy", fields: [parentCategoryId], references: [id])
  nestedCategories   Categories[]         @relation("CategoriesHierarchy")
  parentCategoryId   String?
  products           Product[]
  Properties         Properties[]
}

model CategoryProperties {
  id           String      @id @default(uuid())
  Categories   Categories? @relation(fields: [categoriesId], references: [id])
  categoriesId String?
  properties   Properties  @relation(fields: [propertiesId], references: [id])
  propertiesId String
}

model Properties {
  id                 String               @id @default(uuid())
  name               String
  values             String[]
  uuid               String
  categories         Categories?          @relation(fields: [categoriesId], references: [id])
  categoriesId       String?
  categoryProperties CategoryProperties[]
}

model ProductColors {
  id        String  @id @default(uuid())
  product   Product @relation(fields: [productId], references: [id])
  productId String
  color     Colors  @relation(fields: [colorsId], references: [id])
  colorsId  String
}

model Colors {
  id            String          @id @default(uuid())
  value         String
  label         String
  color         String
  Product       Product?        @relation(fields: [productId], references: [id])
  productId     String?
  ProductColors ProductColors[]
}

model ProductImages {
  id        String   @id @default(uuid())
  link      String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  Product   Product? @relation(fields: [productId], references: [id])
  productId String?
}

model TransactionSuccess {
  id            String   @id @default(uuid())
  email         String
  transactionId String   @unique
  amount        Int
  currency      String
  date          DateTime
  status        String
}

model TransactionInProcess {
  id            String   @id @default(uuid())
  transactionId String
  amount        Int
  currency      String
  date          DateTime
  status        String
}
